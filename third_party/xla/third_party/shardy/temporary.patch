diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 7f5123e..14054c9 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,4 +1,259 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp b/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
+--- a/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
++++ b/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
+@@ -852,7 +852,7 @@
+     IvarT = GetGroupRecordTypeForObjCIvarBitfield(D);
+ 
+   if (!IvarT->getAs<TypedefType>() && IvarT->isRecordType()) {
+-    RecordDecl *RD = IvarT->castAs<RecordType>()->getDecl();
++    RecordDecl *RD = IvarT->castAs<RecordType>()->getOriginalDecl();
+     RD = RD->getDefinition();
+     if (RD && !RD->getDeclName().getAsIdentifierInfo()) {
+       // decltype(((Foo_IMPL*)0)->bar) *
+@@ -865,7 +865,8 @@
+       RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                           SourceLocation(), SourceLocation(),
+                                           &Context->Idents.get(RecName));
+-      QualType PtrStructIMPL = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType PtrStructIMPL =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       unsigned UnsignedIntSize =
+       static_cast<unsigned>(Context->getTypeSize(Context->UnsignedIntTy));
+       Expr *Zero = IntegerLiteral::Create(*Context,
+@@ -2999,7 +3000,7 @@
+ 
+     SuperStructDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(SuperStructDecl);
++  return Context->getCanonicalTagType(SuperStructDecl);
+ }
+ 
+ QualType RewriteModernObjC::getConstantStringStructType() {
+@@ -3032,7 +3033,7 @@
+ 
+     ConstantStringDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(ConstantStringDecl);
++  return Context->getCanonicalTagType(ConstantStringDecl);
+ }
+ 
+ /// getFunctionSourceLocation - returns start location of a function
+@@ -3637,7 +3638,8 @@
+     return RewriteObjCFieldDeclType(ElemTy, Result);
+   }
+   else if (Type->isRecordType()) {
+-    RecordDecl *RD = Type->castAs<RecordType>()->getDecl();
++    RecordDecl *RD =
++        Type->castAs<RecordType>()->getOriginalDecl()->getDefinitionOrSelf();
+     if (RD->isCompleteDefinition()) {
+       if (RD->isStruct())
+         Result += "\n\tstruct ";
+@@ -3660,7 +3662,8 @@
+     }
+   }
+   else if (Type->isEnumeralType()) {
+-    EnumDecl *ED = Type->castAs<EnumType>()->getDecl();
++    EnumDecl *ED =
++        Type->castAs<EnumType>()->getOriginalDecl()->getDefinitionOrSelf();
+     if (ED->isCompleteDefinition()) {
+       Result += "\n\tenum ";
+       Result += ED->getName();
+@@ -3732,10 +3735,10 @@
+ 
+   TagDecl *TD = nullptr;
+   if (Type->isRecordType()) {
+-    TD = Type->castAs<RecordType>()->getDecl();
++    TD = Type->castAs<RecordType>()->getOriginalDecl()->getDefinitionOrSelf();
+   }
+   else if (Type->isEnumeralType()) {
+-    TD = Type->castAs<EnumType>()->getDecl();
++    TD = Type->castAs<EnumType>()->getOriginalDecl()->getDefinitionOrSelf();
+   }
+ 
+   if (TD) {
+@@ -3793,7 +3796,7 @@
+                                   false, ICIS_NoInit));
+   }
+   RD->completeDefinition();
+-  return Context->getTagDeclType(RD);
++  return Context->getCanonicalTagType(RD);
+ }
+ 
+ QualType RewriteModernObjC::GetGroupRecordTypeForObjCIvarBitfield(ObjCIvarDecl *IV) {
+@@ -4572,7 +4575,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("__block_impl"));
+-  QualType PtrBlock = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType PtrBlock = Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+   // Generate a funky cast.
+   SmallVector<QualType, 8> ArgTypes;
+@@ -5316,7 +5319,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "SynthBlockInitExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+       FD = SynthBlockInitFunctionDecl(ND->getName());
+       Exp = new (Context) DeclRefExpr(*Context, FD, false, FD->getType(),
+@@ -5719,7 +5723,10 @@
+           }
+         }
+       } else if (VD->getType()->isRecordType()) {
+-        RecordDecl *RD = VD->getType()->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = VD->getType()
++                             ->castAs<RecordType>()
++                             ->getOriginalDecl()
++                             ->getDefinitionOrSelf();
+         if (RD->isCompleteDefinition())
+           RewriteRecordBody(RD);
+       }
+@@ -7460,7 +7467,7 @@
+         IvarT = GetGroupRecordTypeForObjCIvarBitfield(D);
+ 
+       if (!IvarT->getAs<TypedefType>() && IvarT->isRecordType()) {
+-        RecordDecl *RD = IvarT->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = IvarT->castAs<RecordType>()->getOriginalDecl();
+         RD = RD->getDefinition();
+         if (RD && !RD->getDeclName().getAsIdentifierInfo()) {
+           // decltype(((Foo_IMPL*)0)->bar) *
+@@ -7473,7 +7480,8 @@
+           RecordDecl *RD = RecordDecl::Create(
+               *Context, TagTypeKind::Struct, TUDecl, SourceLocation(),
+               SourceLocation(), &Context->Idents.get(RecName));
+-          QualType PtrStructIMPL = Context->getPointerType(Context->getTagDeclType(RD));
++          QualType PtrStructIMPL =
++              Context->getPointerType(Context->getCanonicalTagType(RD));
+           unsigned UnsignedIntSize =
+             static_cast<unsigned>(Context->getTypeSize(Context->UnsignedIntTy));
+           Expr *Zero = IntegerLiteral::Create(*Context,
+diff -ruN --strip-trailing-cr a/clang/lib/Frontend/Rewrite/RewriteObjC.cpp b/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
+--- a/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
++++ b/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
+@@ -2358,7 +2358,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("objc_super"));
+-  QualType argT = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType argT = Context->getPointerType(Context->getCanonicalTagType(RD));
+   assert(!argT.isNull() && "Can't build 'struct objc_super *' type");
+   ArgTys.push_back(argT);
+   argT = Context->getObjCSelType();
+@@ -2401,7 +2401,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("objc_super"));
+-  QualType argT = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType argT = Context->getPointerType(Context->getCanonicalTagType(RD));
+   assert(!argT.isNull() && "Can't build 'struct objc_super *' type");
+   ArgTys.push_back(argT);
+   argT = Context->getObjCSelType();
+@@ -2552,7 +2552,7 @@
+ 
+     SuperStructDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(SuperStructDecl);
++  return Context->getCanonicalTagType(SuperStructDecl);
+ }
+ 
+ QualType RewriteObjC::getConstantStringStructType() {
+@@ -2585,7 +2585,7 @@
+ 
+     ConstantStringDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(ConstantStringDecl);
++  return Context->getCanonicalTagType(ConstantStringDecl);
+ }
+ 
+ CallExpr *RewriteObjC::SynthMsgSendStretCallExpr(FunctionDecl *MsgSendStretFlavor,
+@@ -3750,7 +3750,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("__block_impl"));
+-  QualType PtrBlock = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType PtrBlock = Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+   // Generate a funky cast.
+   SmallVector<QualType, 8> ArgTypes;
+@@ -4468,7 +4468,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "SynthBlockInitExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+       FD = SynthBlockInitFunctionDecl((*I)->getName());
+       Exp = new (Context) DeclRefExpr(*Context, FD, false, FD->getType(),
+@@ -4834,7 +4835,10 @@
+           }
+         }
+       } else if (VD->getType()->isRecordType()) {
+-        RecordDecl *RD = VD->getType()->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = VD->getType()
++                             ->castAs<RecordType>()
++                             ->getOriginalDecl()
++                             ->getDefinitionOrSelf();
+         if (RD->isCompleteDefinition())
+           RewriteRecordBody(RD);
+       }
+@@ -5804,7 +5808,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "RewriteObjCIvarRefExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       CastExpr *castExpr = NoTypeInfoCStyleCastExpr(Context, castT,
+                                                     CK_BitCast,
+                                                     IV->getBase());
+@@ -5845,7 +5850,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "RewriteObjCIvarRefExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       CastExpr *castExpr = NoTypeInfoCStyleCastExpr(Context, castT,
+                                                     CK_BitCast,
+                                                     IV->getBase());
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/TreeTransform.h b/clang/lib/Sema/TreeTransform.h
+--- a/clang/lib/Sema/TreeTransform.h
++++ b/clang/lib/Sema/TreeTransform.h
+@@ -5417,6 +5417,7 @@
+   case TypeLoc::Typedef:
+   case TypeLoc::TemplateSpecialization:
+   case TypeLoc::SubstTemplateTypeParm:
++  case TypeLoc::SubstTemplateTypeParmPack:
+   case TypeLoc::PackIndexing:
+   case TypeLoc::Enum:
+   case TypeLoc::Record:
+diff -ruN --strip-trailing-cr a/clang/test/SemaTemplate/nested-name-spec-template.cpp b/clang/test/SemaTemplate/nested-name-spec-template.cpp
+--- a/clang/test/SemaTemplate/nested-name-spec-template.cpp
++++ b/clang/test/SemaTemplate/nested-name-spec-template.cpp
+@@ -167,3 +167,18 @@
+   };
+   template struct C<int>;
+ } // namespace unresolved_using
++
++#if __cplusplus >= 201703L
++namespace SubstTemplateTypeParmPackType {
++  template <int...> struct A {};
++
++  template <class... Ts> void f() {
++    []<int ... Is>(A<Is...>) { (Ts::g(Is) && ...); }(A<0>{});
++    // expected-warning@-1 {{explicit template parameter list for lambdas is a C++20 extension}}
++  };
++
++  struct B { static void g(int); };
++
++  template void f<B>();
++} // namespace SubstTemplateTypeParmPackType
++#endif
 diff -ruN --strip-trailing-cr a/llvm/include/llvm/Analysis/LoopInfo.h b/llvm/include/llvm/Analysis/LoopInfo.h
 --- a/llvm/include/llvm/Analysis/LoopInfo.h
 +++ b/llvm/include/llvm/Analysis/LoopInfo.h
@@ -123,6 +378,29 @@ diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Scalar/LICM.cpp b/llvm/lib/T
            MustExecuteWithoutWritesBefore(I)) {
          hoist(I, DT, CurLoop, CFH.getOrCreateHoistedBlock(BB), SafetyInfo,
                MSSAU, SE, ORE);
+diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
+--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
++++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
+@@ -9772,6 +9772,19 @@
+                "Must only have a single non-zero incoming value");
+         EPI.VectorTripCount = Inc;
+       }
++      // If we didn't find a non-zero vector trip count, all incoming values
++      // must be zero, which also means the vector trip count is zero. Pick the
++      // first zero as vector trip count.
++      // TODO: We should not choose VF * UF so the main vector loop is known to
++      // be dead.
++      if (!EPI.VectorTripCount) {
++        assert(
++            EPResumeVal->getNumIncomingValues() > 0 &&
++            all_of(EPResumeVal->incoming_values(),
++                   [](Value *Inc) { return match(Inc, m_SpecificInt(0)); }) &&
++            "all incoming values must be 0");
++        EPI.VectorTripCount = EPResumeVal->getOperand(0);
++      }
+       VPValue *VPV = Plan.getOrAddLiveIn(EPResumeVal);
+       assert(all_of(IV->users(),
+                     [](const VPUser *U) {
 diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll b/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
 --- a/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
 +++ b/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
@@ -240,6 +518,101 @@ diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LICM/licm-coroutine.ll b/ll
 +declare ptr @malloc(i32)
 +declare void @print(i32)
 +declare void @foo([2 x ptr])
+diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll b/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
+--- a/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
++++ b/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
+@@ -333,3 +333,91 @@
+ exit:
+   ret void
+ }
++
++; TODO: Choose smaller VF * UF for main loop, so we do not create a dead vector loop.
++define void @small_trip_count_loop(ptr %arg, ptr %arg2) {
++; CHECK-LABEL: @small_trip_count_loop(
++; CHECK-NEXT:  iter.check:
++; CHECK-NEXT:    [[ARG3:%.*]] = ptrtoint ptr [[ARG:%.*]] to i64
++; CHECK-NEXT:    [[ARG21:%.*]] = ptrtoint ptr [[ARG2:%.*]] to i64
++; CHECK-NEXT:    br i1 false, label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
++; CHECK:       vector.memcheck:
++; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 [[ARG21]], [[ARG3]]
++; CHECK-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP0]], 64
++; CHECK-NEXT:    br i1 [[DIFF_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
++; CHECK:       vector.main.loop.iter.check:
++; CHECK-NEXT:    br i1 true, label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
++; CHECK:       vector.ph:
++; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
++; CHECK:       vector.body:
++; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 16
++; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 32
++; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 48
++; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <16 x i8>, ptr [[ARG]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <16 x i8>, ptr [[TMP1]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD5:%.*]] = load <16 x i8>, ptr [[TMP2]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <16 x i8>, ptr [[TMP3]], align 1
++; CHECK-NEXT:    [[TMP4:%.*]] = add <16 x i8> [[WIDE_LOAD]], splat (i8 10)
++; CHECK-NEXT:    [[TMP5:%.*]] = add <16 x i8> [[WIDE_LOAD4]], splat (i8 10)
++; CHECK-NEXT:    [[TMP6:%.*]] = add <16 x i8> [[WIDE_LOAD5]], splat (i8 10)
++; CHECK-NEXT:    [[TMP7:%.*]] = add <16 x i8> [[WIDE_LOAD6]], splat (i8 10)
++; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 16
++; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 32
++; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 48
++; CHECK-NEXT:    store <16 x i8> [[TMP4]], ptr [[ARG2]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP5]], ptr [[TMP8]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP6]], ptr [[TMP9]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP7]], ptr [[TMP10]], align 1
++; CHECK-NEXT:    br label [[MIDDLE_BLOCK:%.*]]
++; CHECK:       middle.block:
++; CHECK-NEXT:    br i1 false, label [[EXIT:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
++; CHECK:       vec.epilog.iter.check:
++; CHECK-NEXT:    br i1 false, label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
++; CHECK:       vec.epilog.ph:
++; CHECK-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i32 [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
++; CHECK-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
++; CHECK:       vec.epilog.vector.body:
++; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
++; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 [[INDEX]]
++; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <16 x i8>, ptr [[TMP11]], align 1
++; CHECK-NEXT:    [[TMP12:%.*]] = add <16 x i8> [[WIDE_LOAD7]], splat (i8 10)
++; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 [[INDEX]]
++; CHECK-NEXT:    store <16 x i8> [[TMP12]], ptr [[TMP13]], align 1
++; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 16
++; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], 16
++; CHECK-NEXT:    br i1 [[TMP14]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
++; CHECK:       vec.epilog.middle.block:
++; CHECK-NEXT:    br i1 false, label [[EXIT]], label [[VEC_EPILOG_SCALAR_PH]]
++; CHECK:       vec.epilog.scalar.ph:
++; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ 16, [[VEC_EPILOG_MIDDLE_BLOCK]] ], [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[ITER_CHECK:%.*]] ]
++; CHECK-NEXT:    br label [[LOOP:%.*]]
++; CHECK:       loop:
++; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ [[BC_RESUME_VAL]], [[VEC_EPILOG_SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
++; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 [[IV]]
++; CHECK-NEXT:    [[LOAD:%.*]] = load i8, ptr [[GEP_A]], align 1
++; CHECK-NEXT:    [[SELECT:%.*]] = add i8 [[LOAD]], 10
++; CHECK-NEXT:    [[GEP_B:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 [[IV]]
++; CHECK-NEXT:    store i8 [[SELECT]], ptr [[GEP_B]], align 1
++; CHECK-NEXT:    [[IV_NEXT]] = add i32 [[IV]], 1
++; CHECK-NEXT:    [[EC:%.*]] = icmp eq i32 [[IV]], 20
++; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP12:![0-9]+]]
++; CHECK:       exit:
++; CHECK-NEXT:    ret void
++;
++entry:
++  br label %loop
++
++loop:
++  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]
++  %gep.A = getelementptr inbounds i8, ptr %arg, i32 %iv
++  %load = load i8, ptr %gep.A, align 1
++  %select = add i8 %load, 10
++  %gep.B = getelementptr inbounds i8, ptr %arg2, i32 %iv
++  store i8 %select, ptr %gep.B, align 1
++  %iv.next = add i32 %iv, 1
++  %ec = icmp eq i32 %iv, 20
++  br i1 %ec, label %exit, label %loop
++
++exit:
++  ret void
++}
 diff -ruN --strip-trailing-cr a/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir b/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
 --- a/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
 +++ b/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index e54cc0d..b1de9e3 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "fc44a4fcd3c54be927c15ddd9211aca1501633e7"
-    LLVM_SHA256 = "d228aebe5583c69c4e48fd7a8e149e3d22ee6dafaeae94009467143d32d9bfc4"
+    LLVM_COMMIT = "91cdd35008e9ab32dffb7e401cdd7313b3461892"
+    LLVM_SHA256 = "434800edbc95934c13e938f168de08e914a4835f4e314790f2dbae125a2d46cd"
 
     tf_http_archive(
         name = name,
